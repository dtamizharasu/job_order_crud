name: Build and Deploy Java App

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select the deployment environment'
        required: true
        default: 'dev'

  push:
    branches: [main, master, develop]

  pull_request:
    branches: [main, master, develop]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Java 11
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.m2/repository
            target
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build and Unit Test
        run: mvn -B clean install

      - name: SonarCloud Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn sonar:sonar \
            -Dsonar.projectKey=dtamizharasu_job_order_crud \
            -Dsonar.organization=dtamizharasu \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.token=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.sources=src/main/java \
            -Dsonar.tests=src/test/java \
            -Dsonar.java.binaries=target/classes \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

      - name: SonarCloud Quality Gate Status
        run: |
          echo "Checking Quality Gate status from SonarCloud API..."
          PROJECT_KEY="dtamizharasu_job_order_crud"
          SONAR_TOKEN="${{ secrets.SONAR_TOKEN }}"
          SONAR_API_URL="https://sonarcloud.io/api/qualitygates/project_status?projectKey=$PROJECT_KEY"

          for i in {1..10}; do
            STATUS=$(curl -s -u "$SONAR_TOKEN:" "$SONAR_API_URL" | jq -r '.projectStatus.status')
            echo "Current status: $STATUS"
            if [ "$STATUS" == "OK" ]; then
              echo "✅ Quality Gate passed."
              break
            elif [ "$STATUS" == "ERROR" ]; then
              echo "❌ Quality Gate failed."
              exit 1
            else
              echo "Waiting for analysis result... ($i/10)"
              sleep 10
            fi
          done

      - name: Add SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SERVER_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "Host *" >> ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config
